type GetChatMessagesResponse {
  ok: Boolean!
  error: String
  messages: [Message]
}

type Query {
  GetChatMessages(chatId: Int!, requestTime: String): GetChatMessagesResponse!
  GetChatUser(id: Int!): GetChatUserResponse!
  GetCommentList(id: Int!, skip: Int!, take: Int!, sort: SortTarget!): GetCommentListResponse!
  GetILikeUserList(skip: Int!, take: Int!): GetILikeUserListResponse!
  GetLikeMeUserList(requestTime: String!, skip: Int!, take: Int!): GetLikeMeUserListResponse!
  GetPost(id: Int!): GetPostResponse!
  GetPostList(requestTime: String!, means: String!, skip: Int!, take: Int!): GetPostListResponse!
  GetCustomToken(means: CustomTokenMeansOptions!, socialId: String!): GetCustomTokenResponse!
  GetMyChat: GetMyChatResponse!
  GetMyProfile: GetMyProfileResponse!
  GetUserList(requestTime: String!, means: GetUserListMeans!, skip: Int!, take: Int!): GetUserListResponse!
  GetUserProfile(id: Int!): GetUserProfileResponse!
}

type GetChatUserResponse {
  ok: Boolean!
  error: String
  user: User
}

type LeaveChatResponse {
  ok: Boolean!
  error: String
}

type Mutation {
  LeaveChat(id: Int!): LeaveChatResponse!
  SendChatMessage(chatId: Int, receiveUserId: Int, text: String!): SendChatMessageResponse!
  AddComment(postId: Int!, parentId: Int, content: String!): AddCommentResponse!
  TogglePostLike(id: Int!): TogglePostLikeResponse!
  ToggleUserLike(id: Int!): ToggleUserLikeResponse!
  UploadPost(title: String!, content: String!, postPhotos: [PhotoObject!]): UploadPostResponse
  LoginCompletePhoneVerification(phoneNumber: String!, key: String!): LoginCompletePhoneVerificationResponse!
  LoginStartPhoneVerification(phoneNumber: String!): LoginStartPhoneVerificationResponse
  ReportMovement(lastLat: Float, lastLng: Float): ReportMovementResponse!
  SetUserNotify(token: String!): SetUserNotifyResponse!
  SignUpCompletePhoneVerification(phoneNumber: String!, key: String!, fbId: String, ggId: String, kkId: String, nickName: String!, gender: String!, birth: String!): SignUpCompletePhoneVerificationResponse!
  SignUpStartPhoneVerification(phoneNumber: String!): SignUpStartPhoneVerificationResponse!
  UpdateUserProfile(nickName: String!, intro: String!, profilePhoto: [PhotoObject!]!): UpdateUserProfileResponse!
}

type Subscription {
  MessageSubscription: Message
}

type SendChatMessageResponse {
  ok: Boolean!
  error: String
  message: Message
}

type Chat {
  id: Int!
  users: [User!]!
  messages: [Message]
  createdAt: String!
  updatedAt: String
}

type AddCommentResponse {
  ok: Boolean!
  error: String
}

type GetCommentListResponse {
  ok: Boolean!
  error: String
  comments: [Comment]
}

enum SortTarget {
  ASC
  DESC
}

type Comment {
  id: Int!
  parentId: Int
  content: String!
  user: User!
  userId: Int!
  post: Post!
  postId: Int!
  depth: Int!
  seq: Int!
  createdAt: String!
  updatedAt: String
}

type File {
  id: Int!
  user: User!
  userId: Int!
  post: Post
  postId: Int
  url: String!
  key: String!
  createdAt: String!
  updatedAt: String
}

type GetILikeUserListResponse {
  ok: Boolean!
  error: String
  likes: [Like]
}

type GetLikeMeUserListResponse {
  ok: Boolean!
  error: String
  likes: [Like]
}

type Like {
  id: Int!
  user: User!
  userId: Int!
  post: Post!
  postId: Int!
  likeUser: User!
  likeUserId: Int!
  createdAt: String!
  updatedAt: String
}

type TogglePostLikeResponse {
  ok: Boolean!
  error: String
}

type ToggleUserLikeResponse {
  ok: Boolean!
  error: String
}

type Message {
  id: Int!
  text: String!
  userId: Int
  chat: Chat!
  chatId: Int
  target: String!
  createdAt: String!
  updatedAt: String
}

type GetPostResponse {
  ok: Boolean!
  error: String
  post: Post
  isLiked: Boolean
}

type GetPostListResponse {
  ok: Boolean!
  error: String
  posts: [Post]
}

type Post {
  id: Int!
  title: String!
  content: String!
  userId: Int!
  user: User!
  files: [File!]
  comments: [Comment!]
  likes: [Like!]
  readCount: Int!
  likeCount: Int!
  commentCount: Int!
  createdAt: String!
  updatedAt: String
}

type UploadPostResponse {
  ok: Boolean!
  error: String
}

enum PhotoTarget {
  upload
  delete
  upload
  delete
}

input PhotoObject {
  url: String!
  key: String!
  target: PhotoTarget!
  url: String!
  key: String!
  target: PhotoTarget!
}

type GetCustomTokenResponse {
  ok: Boolean!
  error: String
  token: String
}

enum CustomTokenMeansOptions {
  KAKAO
}

type GetMyChatResponse {
  ok: Boolean!
  error: String
  chat: [Chat]
}

type GetMyProfileResponse {
  ok: Boolean!
  error: String
  user: User
  likeCount: Int
}

type GetUserListResponse {
  ok: Boolean!
  error: String
  users: [User]
  order: [Int]
}

enum GetUserListMeans {
  login
  distance
  hot
  join
}

type GetUserProfileResponse {
  ok: Boolean!
  error: String
  user: User
  likeCount: Int
  isLiked: Boolean
}

type LoginCompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
  userId: Int
  token: String
}

type LoginStartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type ReportMovementResponse {
  ok: Boolean!
  error: String
}

type SetUserNotifyResponse {
  ok: Boolean!
  error: String
}

type User {
  id: Int!
  nickName: String!
  birth: String!
  gender: String!
  intro: String!
  profilePhoto: [File!]
  phoneNumber: String!
  verifiedPhoneNumber: Boolean!
  isOnline: Boolean!
  lastLng: Float
  lastLat: Float
  fbId: String
  ggId: String
  kkId: String
  notifyId: String
  chats: [Chat!]
  files: [File!]
  likes: [Like!]
  doLikes: [Like!]
  cash: Int!
  posts: [Post!]
  comments: [Comment!]
  createdAt: String!
  updatedAt: String
}

type SignUpCompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
  userId: Int
  token: String
}

type SignUpStartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type UpdateUserProfileResponse {
  ok: Boolean!
  error: String
}

type Verification {
  id: Int!
  target: String!
  payload: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String
}
