type Subscription {
  MessageSubscription: Message
}

type SendChatMessageResponse {
  ok: Boolean!
  error: String
  message: Message
}

type Mutation {
  SendChatMessage(chatId: Int, receiveUserId: Int, text: String!): SendChatMessageResponse!
  CompletePhoneVerification(phoneNumber: String!, key: String!, nickName: String!, gender: String!, birth: String!, fbId: String, ggId: String): CompletePhoneVerificationResponse!
  ReportMovement(lastLat: Float, lastLng: Float): ReportMovementResponse!
  SetUserNotify(token: String!): SetUserNotifyResponse!
  StartPhoneVerification(phoneNumber: String!): StartPhoneVerificationResponse
}

type Chat {
  id: Int!
  users: [User!]!
  createdAt: String!
  updatedAt: String
}

type Message {
  id: Int!
  text: String!
  userId: Int
  chatId: Int
  createdAt: String!
  updatedAt: String
}

type CompletePhoneVerificationResponse {
  ok: Boolean!
  error: String
  userId: Int
  token: String
}

type GetMyProfileResponse {
  ok: Boolean!
  error: String
  user: User
}

type Query {
  GetMyProfile: GetMyProfileResponse!
  GetUserList(requestTime: String!, means: String!, skip: Int!, take: Int!): GetUserListResponse!
  user: User
}

type GetUserListResponse {
  ok: Boolean!
  error: String
  users: [User]
}

type ReportMovementResponse {
  ok: Boolean!
  error: String
}

type SetUserNotifyResponse {
  ok: Boolean!
  error: String
}

type User {
  id: Int!
  nickName: String!
  birth: String!
  gender: String!
  intro: String!
  profilePhoto: [String]
  phoneNumber: String!
  verifiedPhoneNumber: Boolean!
  isOnline: Boolean!
  lastLng: Float
  lastLat: Float
  fbId: String
  ggId: String
  notifyId: String
  chats: [Chat!]
  createdAt: String!
  updatedAt: String
}

type StartPhoneVerificationResponse {
  ok: Boolean!
  error: String
}

type Verification {
  id: Int!
  target: String!
  payload: String!
  key: String!
  verified: Boolean!
  createdAt: String!
  updatedAt: String
}
